// <auto-generated />
using System;
using GroceryShop.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GroceryShop.DAL.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20240313144205_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46a9fb13-1d8a-4ffc-bc02-d6223387e070"),
                            Name = "Fruits and Vegetables"
                        },
                        new
                        {
                            Id = new Guid("c4e7f284-7799-4618-af45-dfa2dd2d5006"),
                            Name = "Meat and Poultry"
                        },
                        new
                        {
                            Id = new Guid("e461936e-7a8f-4838-9456-2ed1671ac216"),
                            Name = "Confectionery"
                        },
                        new
                        {
                            Id = new Guid("b7d168b9-5195-403c-9386-904c792537c6"),
                            Name = "Groceries"
                        },
                        new
                        {
                            Id = new Guid("2bf9b214-678f-4096-b103-185d3ccaca0b"),
                            Name = "Pet Food"
                        });
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3852bdea-7403-4441-9860-a481760567ec"),
                            CategoryId = new Guid("46a9fb13-1d8a-4ffc-bc02-d6223387e070"),
                            Description = "Fresh and delicious apple",
                            Name = "Apple",
                            Price = 1.50m,
                            StockQuantity = 100,
                            SupplierId = new Guid("12cd45fd-6cfb-4efb-8893-6f1b5660030e")
                        },
                        new
                        {
                            Id = new Guid("80e2ee3b-d6d6-45d5-8c7f-30ed1798700d"),
                            CategoryId = new Guid("46a9fb13-1d8a-4ffc-bc02-d6223387e070"),
                            Description = "Ripe and sweet banana",
                            Name = "Banana",
                            Price = 0.75m,
                            StockQuantity = 150,
                            SupplierId = new Guid("12cd45fd-6cfb-4efb-8893-6f1b5660030e")
                        },
                        new
                        {
                            Id = new Guid("89ae8560-7342-430c-82c4-ed45417719ac"),
                            CategoryId = new Guid("c4e7f284-7799-4618-af45-dfa2dd2d5006"),
                            Description = "Fresh chicken breast, skinless and boneless",
                            Name = "Chicken Breast",
                            Price = 5.99m,
                            StockQuantity = 50,
                            SupplierId = new Guid("a19c7002-5c0a-4c4c-9cf9-78ba72040bfe")
                        },
                        new
                        {
                            Id = new Guid("be19044d-90db-48b4-86f8-409d5f6e2484"),
                            CategoryId = new Guid("c4e7f284-7799-4618-af45-dfa2dd2d5006"),
                            Description = "Lean ground beef, perfect for burgers and meatballs",
                            Name = "Ground Beef",
                            Price = 7.49m,
                            StockQuantity = 80,
                            SupplierId = new Guid("a19c7002-5c0a-4c4c-9cf9-78ba72040bfe")
                        },
                        new
                        {
                            Id = new Guid("87557855-45fa-4fc6-8923-9d076cc97aa0"),
                            CategoryId = new Guid("e461936e-7a8f-4838-9456-2ed1671ac216"),
                            Description = "Creamy milk chocolate bar",
                            Name = "Chocolate Bar",
                            Price = 2.25m,
                            StockQuantity = 120,
                            SupplierId = new Guid("86e01c0d-fd6c-4cd6-93b8-4d5c4b229aa3")
                        },
                        new
                        {
                            Id = new Guid("b134a984-0bb3-4988-a090-97ed05b255a8"),
                            CategoryId = new Guid("e461936e-7a8f-4838-9456-2ed1671ac216"),
                            Description = "Assorted fruit-flavored gummy bears",
                            Name = "Gummy Bears",
                            Price = 1.99m,
                            StockQuantity = 200,
                            SupplierId = new Guid("86e01c0d-fd6c-4cd6-93b8-4d5c4b229aa3")
                        },
                        new
                        {
                            Id = new Guid("a0616cdc-acdc-4917-a587-1bc5c2c07394"),
                            CategoryId = new Guid("b7d168b9-5195-403c-9386-904c792537c6"),
                            Description = "All-purpose flour for baking and cooking",
                            Name = "Flour",
                            Price = 3.49m,
                            StockQuantity = 300,
                            SupplierId = new Guid("c4204f38-5307-4c72-a360-6e2e8e4cbecb")
                        },
                        new
                        {
                            Id = new Guid("f503403e-a8f7-498a-bfc4-dca8d17c28c4"),
                            CategoryId = new Guid("b7d168b9-5195-403c-9386-904c792537c6"),
                            Description = "Long-grain white rice, great for side dishes",
                            Name = "Rice",
                            Price = 2.99m,
                            StockQuantity = 250,
                            SupplierId = new Guid("c4204f38-5307-4c72-a360-6e2e8e4cbecb")
                        },
                        new
                        {
                            Id = new Guid("b795a6b6-36ab-4e6d-8262-759e2e0acd9a"),
                            CategoryId = new Guid("2bf9b214-678f-4096-b103-185d3ccaca0b"),
                            Description = "Nutritious dry dog food, suitable for all breeds",
                            Name = "Dog Food",
                            Price = 12.99m,
                            StockQuantity = 100,
                            SupplierId = new Guid("2f84c348-3ef0-49eb-8894-16ff6f7dc7e2")
                        },
                        new
                        {
                            Id = new Guid("9b55998b-4545-40c0-ab88-6fc6bb814651"),
                            CategoryId = new Guid("2bf9b214-678f-4096-b103-185d3ccaca0b"),
                            Description = "Wholesome wet cat food, made with real meat and fish",
                            Name = "Cat Food",
                            Price = 9.99m,
                            StockQuantity = 80,
                            SupplierId = new Guid("2f84c348-3ef0-49eb-8894-16ff6f7dc7e2")
                        });
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2485b40e-1a8d-4170-97ff-bc022d0257fd"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("01b13b2f-0941-487f-8748-4d2faf7781dd"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12cd45fd-6cfb-4efb-8893-6f1b5660030e"),
                            ContactNumber = "555-123-4567",
                            Name = "GreenGrocer Inc."
                        },
                        new
                        {
                            Id = new Guid("86e01c0d-fd6c-4cd6-93b8-4d5c4b229aa3"),
                            ContactNumber = "555-987-6543",
                            Name = "FarmFresh Foods"
                        },
                        new
                        {
                            Id = new Guid("a19c7002-5c0a-4c4c-9cf9-78ba72040bfe"),
                            ContactNumber = "555-789-0123",
                            Name = "Poultry Paradise"
                        },
                        new
                        {
                            Id = new Guid("c4204f38-5307-4c72-a360-6e2e8e4cbecb"),
                            ContactNumber = "555-234-5678",
                            Name = "Dairy Delight"
                        },
                        new
                        {
                            Id = new Guid("2f84c348-3ef0-49eb-8894-16ff6f7dc7e2"),
                            ContactNumber = "555-876-5432",
                            Name = "Seafood Sensations"
                        });
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3295f788-443f-4413-9206-c5b45da7373f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2203a17-fbe1-4394-8402-2fdcf2626a60",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENMXsIObE35iKJ7N/ol4ypHCGY1PDChN2naCjC8bJHvI20pcWjNCB73mglG9kH913Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "887c6e60-f547-4f80-96a8-3360e24c5d71",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b9362969-ff2f-44d0-ba65-3acd23f0fc50"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c27060f-e77f-41ff-a0a6-08311bb8c460",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPJXQ2X9gAeDYvL+izFgQFLoawEgSTRlpicEa8zbQ3/YUb1df294d6rYhxE7NDPSUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1863ad20-de6f-42e0-bd10-b7eaf8af0bd4",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3295f788-443f-4413-9206-c5b45da7373f"),
                            RoleId = new Guid("2485b40e-1a8d-4170-97ff-bc022d0257fd")
                        },
                        new
                        {
                            UserId = new Guid("b9362969-ff2f-44d0-ba65-3acd23f0fc50"),
                            RoleId = new Guid("01b13b2f-0941-487f-8748-4d2faf7781dd")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Order", b =>
                {
                    b.HasOne("GroceryShop.DAL.Entities.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.OrderItem", b =>
                {
                    b.HasOne("GroceryShop.DAL.Entities.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("GroceryShop.DAL.Entities.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroceryShop.DAL.Entities.Models.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Product", b =>
                {
                    b.HasOne("GroceryShop.DAL.Entities.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("GroceryShop.DAL.Entities.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GroceryShop.DAL.Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GroceryShop.DAL.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GroceryShop.DAL.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GroceryShop.DAL.Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroceryShop.DAL.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GroceryShop.DAL.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("GroceryShop.DAL.Entities.Models.User", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
